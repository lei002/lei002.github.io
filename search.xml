<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/lei002.github.io/2021/01/16/java-yu-fa-ji-chu/"/>
      <url>/lei002.github.io/2021/01/16/java-yu-fa-ji-chu/</url>
      
        <content type="html"><![CDATA[<h1 id="Java语法基础"><a href="#Java语法基础" class="headerlink" title="Java语法基础"></a>Java语法基础</h1><p>[TOC]</p><h2 id="关键字和保留字"><a href="#关键字和保留字" class="headerlink" title="关键字和保留字"></a>关键字和保留字</h2><h3 id="关键字（Key-Word）"><a href="#关键字（Key-Word）" class="headerlink" title="关键字（Key Word）"></a>关键字（Key Word）</h3><blockquote><p>什么是关键字？</p></blockquote><ul><li>关键字就是被Java语法赋予特定含义的单词</li></ul><blockquote><p>关键字有什么作用？</p></blockquote><ul><li><p>关键字对编译器有特殊意义，他们用来表示一种数据类型或者表示程序的结构</p></li><li><p>class</p></li></ul><blockquote><p>关键字有什么特点？</p></blockquote><ul><li>关键字必须全部小写</li></ul><h3 id="保留字（Reserve-Word）"><a href="#保留字（Reserve-Word）" class="headerlink" title="保留字（Reserve Word）"></a>保留字（Reserve Word）</h3><blockquote><p>什么是保留字？</p></blockquote><ul><li>保留字是对当前版本的Java并没有特殊含义的单词<ul><li>但是，以后的版本可能会变成具有特殊含义的单词，将其升级为关键字</li><li>即便以后也不打算升级为关键字，但是Java官方认为你不应该在Java代码中使用的单词</li></ul></li></ul><blockquote><p>有哪些保留字？</p></blockquote><ul><li>const</li><li>goto</li></ul><h3 id="关键字和保留字的语法意义"><a href="#关键字和保留字的语法意义" class="headerlink" title="关键字和保留字的语法意义"></a>关键字和保留字的语法意义</h3><ul><li><strong>关键字和保留字均不能用作变量名、方法名、类名、包名和参数</strong></li><li>由于大家使用比较高级的集成开发环境，关键字是有特殊颜色标记的</li></ul><blockquote><p>课堂抽奖</p></blockquote><p>以下哪些是关键字？</p><p>class，HelloWorld，public，static，void，main，String，System</p><h3 id="Java关键字大全"><a href="#Java关键字大全" class="headerlink" title="Java关键字大全"></a>Java关键字大全</h3><table><thead><tr><th>关键字</th><th>含义</th></tr></thead><tbody><tr><td>abstract</td><td>表明类或者成员方法具有抽象属性</td></tr><tr><td>assert</td><td>用来进行程序调试</td></tr><tr><td>boolean</td><td>基本数据类型之一，布尔类型</td></tr><tr><td>break</td><td>提前跳出一个块</td></tr><tr><td>byte</td><td>基本数据类型之一，字节类型</td></tr><tr><td>case</td><td>用在switch语句之中，表示其中的一个分支</td></tr><tr><td>catch</td><td>用在异常处理中，用来捕捉异常</td></tr><tr><td>char</td><td>基本数据类型之一，字符类型</td></tr><tr><td>class</td><td>类</td></tr><tr><td><font color="red">const</font></td><td>保留关键字，没有具体含义</td></tr><tr><td>continue</td><td>回到一个块的开始处</td></tr><tr><td>default</td><td>默认，例如，用在switch语句中，表明一个默认的分支</td></tr><tr><td>do</td><td>用在do-while循环结构中</td></tr><tr><td>double</td><td>基本数据类型之一，双精度浮点数类型</td></tr><tr><td>else</td><td>用在条件语句中，表明当条件不成立时的分支</td></tr><tr><td>enum</td><td>枚举</td></tr><tr><td>extends</td><td>表明一个类型是另一个类型的子类型，这里常见的类型有类和接口</td></tr><tr><td>final</td><td>用来说明最终属性，表明一个类不能派生出子类，或者成员方法不能被覆盖，或者成员域的值不能被改变，用来定义常量</td></tr><tr><td>finally</td><td>用于处理异常情况，用来声明一个基本肯定会被执行到的语句块</td></tr><tr><td>float</td><td>基本数据类型之一，单精度浮点数类型</td></tr><tr><td>for</td><td>一种循环结构的引导词</td></tr><tr><td><font color="red">goto</font></td><td>保留关键字，没有具体含义</td></tr><tr><td>if</td><td>条件语句的引导词</td></tr><tr><td>implements</td><td>表明一个类实现了给定的接口</td></tr><tr><td>import</td><td>表明要访问指定的类或包</td></tr><tr><td>instanceof</td><td>用来测试一个对象是否是指定类型的实例对象</td></tr><tr><td>int</td><td>基本数据类型之一，整数类型</td></tr><tr><td>interface</td><td>接口</td></tr><tr><td>long</td><td>基本数据类型之一，长整数类型</td></tr><tr><td>native</td><td>用来声明一个方法是由与计算机相关的语言(如C/C++/FORTRAN语言)实现的</td></tr><tr><td>new</td><td>用来创建新实例对象</td></tr><tr><td>package</td><td>包</td></tr><tr><td>private</td><td>一种访问控制方式:私用模式</td></tr><tr><td>protected</td><td>一种访问控制方式:保护模式</td></tr><tr><td>public</td><td>一种访问控制方式:共用模式</td></tr><tr><td>return</td><td>从成员方法中返回数据</td></tr><tr><td>short</td><td>基本数据类型之一,短整数类型</td></tr><tr><td>static</td><td>表明具有静态属性</td></tr><tr><td>strictfp</td><td>用来声明FP_strict(单精度或双精度浮点数)表达式遵循IEEE 754算术规范</td></tr><tr><td>super</td><td>表明当前对象的父类型的引用或者父类型的构造方法</td></tr><tr><td>switch</td><td>分支语句结构的引导词</td></tr><tr><td>synchronized</td><td>表明一段代码需要同步执行</td></tr><tr><td>this</td><td>指向当前实例对象的引用</td></tr><tr><td>throw</td><td>抛出一个异常</td></tr><tr><td>throws</td><td>声明在当前定义的成员方法中所有需要抛出的异常</td></tr><tr><td>transient</td><td>声明不用序列化的成员域</td></tr><tr><td>try</td><td>尝试一个可能抛出异常的程序块</td></tr><tr><td>void</td><td>声明当前成员方法没有返回值</td></tr><tr><td>volatile</td><td>表明两个或者多个变量必须同步地发生变化</td></tr><tr><td>while</td><td>用在循环结构中</td></tr></tbody></table><h2 id="标识符（Identifier）"><a href="#标识符（Identifier）" class="headerlink" title="标识符（Identifier）"></a>标识符（Identifier）</h2><blockquote><p>什么是标识符？</p></blockquote><ul><li>标识符是给包，类，接口，方法，变量等起名字时使用的字符序列</li></ul><h3 id="虚假的标识符命名规则（语法）"><a href="#虚假的标识符命名规则（语法）" class="headerlink" title="虚假的标识符命名规则（语法）"></a>虚假的标识符命名规则（语法）</h3><blockquote><p>标识符的语法规则是什么？</p></blockquote><ul><li>标识符的组成<ul><li>数字（0~9）</li><li>字母（A<del>Z 和 a</del>z）</li><li>美元符号（$）</li><li>下划线（_）</li><li>Unicode 字符集中符号大于 0xC0 的所有符号</li></ul></li><li>标识符的开头<ul><li>字母（A<del>Z 和 a</del>z）</li><li>下划线（_）</li><li>美元符号（$）</li><li>Unicode 字符集中符号大于 0xC0 的所有符号</li></ul></li><li>注意事项<ul><li>标识符不能以数字开头</li><li>不能是Java中的关键字和保留字</li><li>标识符区分大小写</li></ul></li></ul><blockquote><p>课堂抽奖</p></blockquote><p>以下标识符命名合法的有哪些？</p><p>HelloWorld，_985，$bS5_c7，class，Class ，DataClass#，98.3，Hello  World</p><h3 id="真实的标识符组成规则（基于语法的约定）"><a href="#真实的标识符组成规则（基于语法的约定）" class="headerlink" title="真实的标识符组成规则（基于语法的约定）"></a>真实的标识符组成规则（基于语法的约定）</h3><p>以上只是语法范畴的标识符规则，但就像人可以起名叫“张三，李四”，但几乎没人这么做一样</p><p><font color="red">在符合语法的前提下</font>，标识符还有一套约定俗成的命名规则，详见《阿里巴巴Java开发规范》</p><blockquote><p>真实的标识符组成规则</p></blockquote><ul><li>符合语法</li><li>只能用英文字母、数字（下划线、美元符号几乎不使用）</li><li>包命名标识符<ul><li>Java中的包类似操作系统中的文件夹</li><li>包的命名，以反转公司域名为规范</li><li>包名应该全部小写</li><li>多级包名以点（.）分隔</li></ul></li><li>类、接口等命名标识符<ul><li>大驼峰命名法</li></ul></li><li>变量、方法的命名标识符<ul><li>小驼峰命名法</li></ul></li><li>常量的命名标识符<ul><li>全部大写（建议）</li><li>多个单词之间用下划线（_）隔开</li></ul></li></ul><blockquote><p>给人起名字也追求好听吉祥，标识符起名也有自己的追求</p></blockquote><ul><li>核心追求是“见名知意”，应该赋予标识符一个有意义、有用途的名字</li></ul><h3 id="驼峰命名法"><a href="#驼峰命名法" class="headerlink" title="驼峰命名法"></a>驼峰命名法</h3><h4 id="小驼峰式命名法（lower-camel-case）"><a href="#小驼峰式命名法（lower-camel-case）" class="headerlink" title="小驼峰式命名法（lower camel case）"></a>小驼峰式命名法（lower camel case）</h4><ul><li>多个单词组合成一个字符串<ul><li>第一个单词的首字母<strong>小写</strong></li><li>从第二个单词开始，首字母都要大写</li></ul></li><li>例如：myName，myFirstJavaProgram</li></ul><h4 id="大驼峰式命名法（upper-camel-case）"><a href="#大驼峰式命名法（upper-camel-case）" class="headerlink" title="大驼峰式命名法（upper camel case）"></a>大驼峰式命名法（upper camel case）</h4><ul><li>多个单词组合成一个字符串<ul><li>第一个单词的首字母<strong>大写</strong></li><li>从第二个单词开始，首字母都要大写</li></ul></li><li>例如：MyName，MyFirstJavaProgram</li></ul><h2 id="注释（comment）"><a href="#注释（comment）" class="headerlink" title="注释（comment）"></a>注释（comment）</h2><blockquote><p>什么是注释？</p></blockquote><ul><li>注释是可以嵌入到Java代码的任何位置的，一种解释说明性的文字</li></ul><blockquote><p>注释有什么作用？</p></blockquote><ul><li>方便自己写代码的时候，记录程序的信息</li><li>增加代码的可读性<ul><li>过段时间后，自己也能很快想起来，自己写的代码是干什么的</li><li>最重要的，方便别人能看懂自己的代码</li></ul></li><li>写注释可以增加自己写代码的逻辑性<ul><li>编码之前先用注释，标注好需要做的事情，先搞明白思路，再写代码</li><li>编码实际上就是思想的体现</li></ul></li><li>注释也可以作为一种比较简单但十分好用有效的，debug的方式<ul><li>将可能出错的代码注释掉，再运行程序，直到找出bug</li></ul></li></ul><blockquote><p>注释的语法</p></blockquote><p>Java支持三种注释的语法格式</p><ul><li><p>单行注释</p><pre class=" language-Java"><code class="language-Java">//注释的文字</code></pre></li><li><p>多行注释</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*注释的文字*/</span></code></pre></li><li><p>文档注释</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**注释的文字*/</span></code></pre></li></ul><blockquote><p>注释的使用注意事项</p></blockquote><ul><li>多行注释和文档注释不要嵌套使用</li><li>注释不参与编译，编译器会自动丢掉代码中的注释部分</li><li>JDK中提供了<strong>javadoc.exe</strong>工具，用于将文档注释输出到一个HTML文件中</li></ul><h2 id="常量与变量"><a href="#常量与变量" class="headerlink" title="常量与变量"></a>常量与变量</h2><blockquote><p>程序运行中，内存中有很多数据参与运算</p><ul><li>Java使用变量来存储这些数据</li><li>程序运行中，值不变的变量就是常量</li></ul></blockquote><h3 id="常量（constant）"><a href="#常量（constant）" class="headerlink" title="常量（constant）"></a>常量（constant）</h3><blockquote><p>什么是常量？</p></blockquote><ul><li>在程序运行过程中，其值不会发生改变的量</li></ul><blockquote><p>常量有哪些分类？</p></blockquote><ul><li>字面值常量（<strong>literal</strong>）<ul><li>字符串常量：双引号引起来的内容<ul><li>“Hello World！”</li></ul></li><li>整数常量：所有的整数<ul><li>1，2，3</li></ul></li><li>小数常量：所有的小数<ul><li>1.1，1.2</li></ul></li><li>字符常量：单引号引起来的内容<ul><li>‘W’，’E’，</li></ul></li><li>布尔常量<ul><li>只有true和false</li></ul></li><li>空常量<ul><li>只有null</li></ul></li></ul></li><li>自定义常量（面向对象详细讲）</li></ul><h3 id="变量（variable）"><a href="#变量（variable）" class="headerlink" title="变量（variable）"></a>变量（variable）</h3><blockquote><p>什么是变量？</p></blockquote><ul><li>程序运行期间，其值在某个范围内，可能会发生改变的量</li><li>可以将变量理解成未知数X</li></ul><blockquote><p>怎么定义一个能够使用的变量</p></blockquote><ul><li>两步走：先声明变量，再初始化变量（赋值）</li></ul><h4 id="声明（declaration）变量"><a href="#声明（declaration）变量" class="headerlink" title="声明（declaration）变量"></a>声明（declaration）变量</h4><blockquote><p>什么是声明变量？</p></blockquote><ul><li>告诉编译器，变量的数据类型，变量的名字</li></ul><blockquote><p>声明变量的语法</p></blockquote><pre class=" language-Java"><code class="language-Java">数据类型 变量名;</code></pre><blockquote><p>课堂抽奖</p></blockquote><p>声明后的变量能够直接使用吗？</p><h4 id="初始化（initialization）变量"><a href="#初始化（initialization）变量" class="headerlink" title="初始化（initialization）变量"></a>初始化（initialization）变量</h4><blockquote><p>什么是初始化变量</p></blockquote><ul><li>就是给变量赋值，声明一个变量后，必须由程序员显式的进行赋值操作，这个变量才能够使用</li></ul><blockquote><p>初始化变量的语法</p></blockquote><pre class=" language-Java"><code class="language-Java">变量名 = 变量值;</code></pre><p>声明和初始化可以合起来</p><pre><code>数据类型 变量名 = 变量名;</code></pre><h4 id="使用变量的注意事项"><a href="#使用变量的注意事项" class="headerlink" title="使用变量的注意事项"></a>使用变量的注意事项</h4><ul><li>变量有效的范围，这个范围通常用{}来界定，同样一个{}不能有同名变量</li><li>变量必须显式初始化，否则只能看不能使用</li><li>一行一个语句可以定义多个同数据类型的变量，用逗号隔开<ul><li>但是一行定义多个变量会影响代码的阅读性，一般不要一行定义多个变量</li></ul></li></ul><h2 id="基本数据类型和引用数据类型"><a href="#基本数据类型和引用数据类型" class="headerlink" title="基本数据类型和引用数据类型"></a>基本数据类型和引用数据类型</h2><p>Java是强类型语言，每一个变量都必须有它的数据类型，并且变量之间不能随便转换数据类型</p><p>主流的语言大多都是强类型 C、C++、Java、python</p><p>弱类型语言</p><p>PHP</p><blockquote><p>什么是数据类型？</p></blockquote><ul><li>数据类型，表示的是一个数据集合和基于该数据集合的一组合法操作</li></ul><blockquote><p>数据类型怎么分类？</p></blockquote><ul><li>基本数据类型：JDK默认提供</li><li>引用数据类型<ul><li>类</li><li>接口</li><li>….</li></ul></li></ul><h3 id="基本数据类型（base-date-type）"><a href="#基本数据类型（base-date-type）" class="headerlink" title="基本数据类型（base date type）"></a>基本数据类型（base date type）</h3><blockquote><p>有哪些基本数据类型？</p></blockquote><blockquote><p>四类八种</p></blockquote><ul><li>整型<ul><li>byte：字节，1个字节空间</li><li>short：短整型，占2个字节空间</li><li>int：整型，占4个字节空间</li><li>long：长整型，占8个字节空间</li><li>注意：Java当中的整数字面值常量，默认当作int处理<ul><li>如果你想要一个整数字面值常量数据类型为long，需要在后缀上加l或L，推荐L</li></ul></li></ul></li><li>浮点型<ul><li>float：单精度浮点型，占4个字节</li><li>double：双精度浮点型，占8个字节</li><li>注意：Java当中的浮点数，默认当作double处理<ul><li>如果你想要一个浮点数字面值常量数据类型为float，需要在后缀上加f或F，推荐</li></ul></li></ul></li><li>字符类型<ul><li>char：占4个字节，表示单个字符</li></ul></li><li>布尔类型<ul><li>boolean：具体占多少内存，了解即可<ul><li>根据JVM规范，在内存中boolean当作int处理，占4个字节</li><li>boolean数组当成byte数组处理，一个boolean元素占1个字节</li></ul></li></ul></li></ul><h4 id="基本数值类型的取值范围"><a href="#基本数值类型的取值范围" class="headerlink" title="基本数值类型的取值范围"></a>基本数值类型的取值范围</h4><table><thead><tr><th>基本数据类型</th><th>字节长度</th><th>大小（位）</th><th>最小值</th><th>最大值</th><th>取值范围</th></tr></thead><tbody><tr><td><strong>byte</strong></td><td>1字节</td><td>8bit</td><td>-2^7</td><td>2^7-1</td><td>-128 ~ 127</td></tr><tr><td><strong>short</strong></td><td>2字节</td><td>16bit</td><td>-2^15</td><td>2^15-1</td><td>-32768 ~ 32767</td></tr><tr><td><strong>int</strong></td><td>4字节</td><td>32bit</td><td>-2^31</td><td>2^31-1</td><td>-2147483648 ~ 2147483647（21亿出头）</td></tr><tr><td><strong>long</strong></td><td>8字节</td><td>64bit</td><td>-2^63</td><td>2^63-1</td><td>-9223372036854774808 ~ 9223372036854774807（大概922亿亿）</td></tr><tr><td><strong>float</strong></td><td>4字节</td><td>32bit</td><td>-</td><td>-</td><td>-3.403E38<del>3.404E38（有效位数7</del>8位）</td></tr><tr><td><strong>double</strong></td><td>8字节</td><td>64bit</td><td>-</td><td>-</td><td>-1.798E308<del>1.798E308（有效数字16</del>17位）</td></tr></tbody></table><h4 id="浮点型的精度问题"><a href="#浮点型的精度问题" class="headerlink" title="浮点型的精度问题"></a>浮点型的精度问题</h4><blockquote><p>什么是精度问题？</p><p>计算的结果的数据类型，或者新的数据类型无法容纳全部的数据，导致部分信息被截断丢失，数据失真</p><p>专业名词就叫做“精度丢失”</p></blockquote><blockquote><p>经典的案例</p></blockquote><ul><li>计算10/3</li><li>计算1-0.9</li></ul><blockquote><ul><li><p>正数十进制转换成二进制，除2直到商为0，取余数倒过来</p></li><li><p>负数十进制转换成二进制，先算出正数的二进制数,取反+1</p></li><li><p>正小数转换成二进制，用小数部分乘以2，取结果的整数部分(必然是1或者0)，</p><ul><li>然后小数部分继续乘2</li><li> 直到小数部分为0,或者已经达到了最大的位数</li><li>最终的结果（0.开头）正序排列</li></ul></li></ul></blockquote><p>结论：浮点运算很少是精确的，只要是超过精度能表示的范围就会产生误差，生产环境慎用浮点数进行计算</p><p>最好的解决办法是用BigDecimal 替代float和double进行浮点数计算</p><h3 id="引用数据类型（reference）"><a href="#引用数据类型（reference）" class="headerlink" title="引用数据类型（reference）"></a>引用数据类型（reference）</h3><blockquote><p>碍于知识点的限制，目前只要知道字符串（String）是一种引用数据类型即可</p><p>String属于引用数据类型中的类</p></blockquote><h3 id="基本数据类型的数据类型转换（conversion）"><a href="#基本数据类型的数据类型转换（conversion）" class="headerlink" title="基本数据类型的数据类型转换（conversion）"></a>基本数据类型的数据类型转换（conversion）</h3><blockquote><p>什么是数据类型转换呢？</p></blockquote><ul><li>Java是强类型语言，变量一旦声明后，数据类型不会轻易改变，但也并非完全不可能改变</li><li>我们将Java中变量的数据类型由某一种转换为另一种，这个过程叫做数据类型转换</li></ul><blockquote><p>数据类型转换的分类</p></blockquote><ul><li>自动类型转换，也叫向上转型<ul><li>向上转型只是自动类型转换的一种说法，这种说法只针对引用数据类型</li></ul></li><li>强制类型转换，也叫向下转型<ul><li>向下转型只是自动类型转换的一种说法，这种说法只针对引用数据类型</li></ul></li></ul><h4 id="基本数据类型的自动类型转换（automatic）"><a href="#基本数据类型的自动类型转换（automatic）" class="headerlink" title="基本数据类型的自动类型转换（automatic）"></a>基本数据类型的自动类型转换（automatic）</h4><blockquote><p>什么是自动类型转换？</p></blockquote><ul><li>数据类型无需程序员操作，由系统自动转换</li></ul><blockquote><p>基本数据类型的自动类型转换的规则</p><p>“小取值范围”转换为“大取值范围”发生自动类型转换（浮点数都比long取值范围大）</p></blockquote><ul><li>byte、short、char之间不互相转换，一旦之间发生运算，一律自动转换为int进行运算，结果是int</li><li>byte、short、char任一数据类型与int进行计算，一律自动转换为int进行计算，结果是int</li><li>byte、short、char、int任一数据类型与long进行计算，一律自动转换为long进行计算，结果是long</li><li>byte、short、char、int、long任一数据类型与float进行计算，一律自动转换为float进行计算，结果是float</li><li>byte、short、char、int、long、float任一数据类型与double进行计算，一律自动转换为double进行计算，结果是double</li></ul><blockquote><p>精度问题</p><p>“小容量”不一定是“小取值范围”——所有浮点类型都比long取值范围大</p><p>但是由于浮点数本身的问题，整型的内存表示方式也和浮点型完全不同，很容易产生精度丢失</p></blockquote><ul><li>当int、long（4字节，8字节）自动转换成float（4字节）时，可能会有精度损失</li><li>当long自动转换成double（8字节）时，也可能产生精度损失</li><li>不要用浮点型计算小数，除非对精度十分不敏感</li></ul><p><img src="../../../../markdown_picture/%E8%87%AA%E5%8A%A8%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E4%B8%AD%E7%9A%84%E7%B2%BE%E5%BA%A6%E4%B8%A2%E5%A4%B1-1610771799581.png" alt="image-20210101011533113"></p><h4 id="基本数据类型的强制类型转换（cast）"><a href="#基本数据类型的强制类型转换（cast）" class="headerlink" title="基本数据类型的强制类型转换（cast）"></a>基本数据类型的强制类型转换（cast）</h4><blockquote><p>什么是强制类型转换</p></blockquote><ul><li>数据类型的转换需要程序员显式操作，否则报错</li></ul><blockquote><p>什么时候需要强制类型转换</p></blockquote><ul><li>在特别有必要的情况下，把一个占内存大的数据类型，转换成小的数据类型，比如int—-&gt;byte</li></ul><blockquote><p>语法</p></blockquote><pre class=" language-java"><code class="language-java">目标数据类型 变量名 <span class="token operator">=</span> <span class="token punctuation">(</span>目标数据类型<span class="token punctuation">)</span><span class="token punctuation">(</span>被转换的变量变量名<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>精度问题</p></blockquote><ul><li>强制类型转换，大变小，精度损失是很常见的</li><li>强烈建议，如果不是不进行强制类型转换，程序就GG，不要使用强制类型转换，稍有不慎会导致bug</li><li>进行强制类型转换，要严格考量，数据类型的取值范围，像(byte)200这种行为是很滑稽的</li></ul><blockquote><p>补充</p></blockquote><ul><li>boolean类型和其他数据类型之间不能通过强制类型转换语法直接转换</li></ul><pre><code>基本数据类型的类型转换，总结出规律1，八种基本数据类型中，只有boolean类型不能直接进行类型转换，其他七种都可以互相转换2，byte、short、char使用的时候尤其注意取值范围，若参与运算都会自动提升到int3，“小取值范围”---&gt;“大取值范围”称之为自动类型转换，排序是    byte &lt; short(char) &lt; int &lt; long &lt; float &lt; double4，“大取值范围”---&gt;“小取值范围”称之为强制类型转换，必须要显式处理，否则报错    强制类型转换，很容易精度丢失，慎用5，多种数据类型混合在一起进行运算，先全部提升为“最大取值范围”的数据类型，再进行计算6，不同的数据类型，不能够直接运算</code></pre><blockquote><p>小练习1</p><p>​     byte b1 = 1, b2 = 2, b;</p><p>​     b = b1+ b2;</p><p>​     b= 1 + 2;</p><p>​     哪句是编译失败的呢？为什么呢？</p></blockquote><blockquote><p>小练习2</p><p>​     byte b = 130;</p><p>​     这句代码有没有问题？</p><p>​    如有问题，咋整？</p></blockquote><blockquote><p>小练习3</p><p>请写出下列程序结果</p><p>System.out.println(‘a’);</p><p>System.out.println(‘a’+1);</p><p>System.out.println(“hello”+’a’+1);</p><p>System.out.println(‘a’+1+”hello”);</p><p>System.out.println(“5+5”+5+5);</p><p>System.out.println(5+5+”=5+5”);</p></blockquote><p>补充：</p><blockquote><p>有符号的数据表示法——原码，反码，补码</p></blockquote><p>计算机中的数据是二进制的，不像生活中用符号表示负数一样那么简单，在计算机中，有符号数的表示分为三种</p><p><font color="red">注意：所有的数据运算都是采用补码形式进行</font></p><ul><li>原码<ul><li>有效数字是其绝对值的二进制表示</li><li>最高位负数是0，正数是1</li><li>有效数字和最高位之间用0补充</li><li>除了最高位符号位外，其余位置都是数值位</li></ul></li><li>反码<ul><li>正数的反码与原码相同</li><li>负数的反码是对其原码逐位取反，符号位除外</li></ul></li><li>补码<ul><li>正数的补码与原码相同</li><li>负数的补码是在其反码上加1</li><li>反码+1=补码</li><li>反码=补码-1</li></ul></li></ul><p>附录：</p><blockquote><p>ASCII码表</p></blockquote><table><thead><tr><th align="left">ASCII值</th><th align="left">控制字符</th><th align="left">ASCII值</th><th align="left">控制字符</th><th align="left">ASCII值</th><th align="left">控制字符</th><th align="left">ASCII值</th><th align="left">控制字符</th></tr></thead><tbody><tr><td align="left">0</td><td align="left">NUT</td><td align="left">32</td><td align="left">(space)</td><td align="left">64</td><td align="left">@</td><td align="left">96</td><td align="left">、</td></tr><tr><td align="left">1</td><td align="left">SOH</td><td align="left">33</td><td align="left">!</td><td align="left">65</td><td align="left">A</td><td align="left">97</td><td align="left">a</td></tr><tr><td align="left">2</td><td align="left">STX</td><td align="left">34</td><td align="left">“</td><td align="left">66</td><td align="left">B</td><td align="left">98</td><td align="left">b</td></tr><tr><td align="left">3</td><td align="left">ETX</td><td align="left">35</td><td align="left">#</td><td align="left">67</td><td align="left">C</td><td align="left">99</td><td align="left">c</td></tr><tr><td align="left">4</td><td align="left">EOT</td><td align="left">36</td><td align="left">$</td><td align="left">68</td><td align="left">D</td><td align="left">100</td><td align="left">d</td></tr><tr><td align="left">5</td><td align="left">ENQ</td><td align="left">37</td><td align="left">%</td><td align="left">69</td><td align="left">E</td><td align="left">101</td><td align="left">e</td></tr><tr><td align="left">6</td><td align="left">ACK</td><td align="left">38</td><td align="left">&amp;</td><td align="left">70</td><td align="left">F</td><td align="left">102</td><td align="left">f</td></tr><tr><td align="left">7</td><td align="left">BEL</td><td align="left">39</td><td align="left">,</td><td align="left">71</td><td align="left">G</td><td align="left">103</td><td align="left">g</td></tr><tr><td align="left">8</td><td align="left">BS</td><td align="left">40</td><td align="left">(</td><td align="left">72</td><td align="left">H</td><td align="left">104</td><td align="left">h</td></tr><tr><td align="left">9</td><td align="left">HT</td><td align="left">41</td><td align="left">)</td><td align="left">73</td><td align="left">I</td><td align="left">105</td><td align="left">i</td></tr><tr><td align="left">10</td><td align="left">LF</td><td align="left">42</td><td align="left">*</td><td align="left">74</td><td align="left">J</td><td align="left">106</td><td align="left">j</td></tr><tr><td align="left">11</td><td align="left">VT</td><td align="left">43</td><td align="left">+</td><td align="left">75</td><td align="left">K</td><td align="left">107</td><td align="left">k</td></tr><tr><td align="left">12</td><td align="left">FF</td><td align="left">44</td><td align="left">,</td><td align="left">76</td><td align="left">L</td><td align="left">108</td><td align="left">l</td></tr><tr><td align="left">13</td><td align="left">CR</td><td align="left">45</td><td align="left">-</td><td align="left">77</td><td align="left">M</td><td align="left">109</td><td align="left">m</td></tr><tr><td align="left">14</td><td align="left">SO</td><td align="left">46</td><td align="left">.</td><td align="left">78</td><td align="left">N</td><td align="left">110</td><td align="left">n</td></tr><tr><td align="left">15</td><td align="left">SI</td><td align="left">47</td><td align="left">/</td><td align="left">79</td><td align="left">O</td><td align="left">111</td><td align="left">o</td></tr><tr><td align="left">16</td><td align="left">DLE</td><td align="left">48</td><td align="left">0</td><td align="left">80</td><td align="left">P</td><td align="left">112</td><td align="left">p</td></tr><tr><td align="left">17</td><td align="left">DCI</td><td align="left">49</td><td align="left">1</td><td align="left">81</td><td align="left">Q</td><td align="left">113</td><td align="left">q</td></tr><tr><td align="left">18</td><td align="left">DC2</td><td align="left">50</td><td align="left">2</td><td align="left">82</td><td align="left">R</td><td align="left">114</td><td align="left">r</td></tr><tr><td align="left">19</td><td align="left">DC3</td><td align="left">51</td><td align="left">3</td><td align="left">83</td><td align="left">S</td><td align="left">115</td><td align="left">s</td></tr><tr><td align="left">20</td><td align="left">DC4</td><td align="left">52</td><td align="left">4</td><td align="left">84</td><td align="left">T</td><td align="left">116</td><td align="left">t</td></tr><tr><td align="left">21</td><td align="left">NAK</td><td align="left">53</td><td align="left">5</td><td align="left">85</td><td align="left">U</td><td align="left">117</td><td align="left">u</td></tr><tr><td align="left">22</td><td align="left">SYN</td><td align="left">54</td><td align="left">6</td><td align="left">86</td><td align="left">V</td><td align="left">118</td><td align="left">v</td></tr><tr><td align="left">23</td><td align="left">TB</td><td align="left">55</td><td align="left">7</td><td align="left">87</td><td align="left">W</td><td align="left">119</td><td align="left">w</td></tr><tr><td align="left">24</td><td align="left">CAN</td><td align="left">56</td><td align="left">8</td><td align="left">88</td><td align="left">X</td><td align="left">120</td><td align="left">x</td></tr><tr><td align="left">25</td><td align="left">EM</td><td align="left">57</td><td align="left">9</td><td align="left">89</td><td align="left">Y</td><td align="left">121</td><td align="left">y</td></tr><tr><td align="left">26</td><td align="left">SUB</td><td align="left">58</td><td align="left">:</td><td align="left">90</td><td align="left">Z</td><td align="left">122</td><td align="left">z</td></tr><tr><td align="left">27</td><td align="left">ESC</td><td align="left">59</td><td align="left">;</td><td align="left">91</td><td align="left">[</td><td align="left">123</td><td align="left">{</td></tr><tr><td align="left">28</td><td align="left">FS</td><td align="left">60</td><td align="left">&lt;</td><td align="left">92</td><td align="left">/</td><td align="left">124</td><td align="left">|</td></tr><tr><td align="left">29</td><td align="left">GS</td><td align="left">61</td><td align="left">=</td><td align="left">93</td><td align="left">]</td><td align="left">125</td><td align="left">}</td></tr><tr><td align="left">30</td><td align="left">RS</td><td align="left">62</td><td align="left">&gt;</td><td align="left">94</td><td align="left">^</td><td align="left">126</td><td align="left">`</td></tr><tr><td align="left">31</td><td align="left">US</td><td align="left">63</td><td align="left">?</td><td align="left">95</td><td align="left">_</td><td align="left">127</td><td align="left">DEL</td></tr></tbody></table>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
