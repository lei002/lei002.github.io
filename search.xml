<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>HTTP&amp;Tomcat</title>
      <link href="2021/05/17/http-tomcat/"/>
      <url>2021/05/17/http-tomcat/</url>
      
        <content type="html"><![CDATA[<hr><hr><h1 id="学习方法"><a href="#学习方法" class="headerlink" title="学习方法"></a>学习方法</h1><p>看视频的过程中，千万不要只是眼睛在看，脑袋没有在看。看视频的过程中，最好还能够自己去记一些笔记。</p><p>自己勤加复习、总结。</p><p>编程如果有捷径的话，那么一定就是反复的敲代码、多敲代码。</p><p>bug：随手整理bug-list.学习过程中遇到的各种各样的bug，相应的解决方案。</p><p>NullPointException—–一个引用或者对象为null，但是从里面取东西。</p><p>ClassCastException—–类转换异常.多态</p><p>FileNotFoundException—-没有找到对应的文件。</p><p>debug：</p><p>清楚代码的执行逻辑，从程序的执行入口开始一步一步分析。</p><p>打断点。</p><p>建议大家先要自己去思考，把相关的问题描述清楚。</p><h1 id="EE"><a href="#EE" class="headerlink" title="EE"></a>EE</h1><p>JavaEE:Enterprise Edition.企业版，是给企业使用的</p><p>JavaSE:Standard Edition.个人版，独立开发者使用的</p><p>企业需要哪些？</p><p>服务器（服务器硬件（云服务器）、服务器软件—-将本地的资源文件发布到网络上面）</p><p>域名</p><p>网页</p><p>用户群、流量—-数据库</p><h1 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h1><p>Hyper Text Transfer Protocol. HTML.同门。</p><p>bernese lee为了不同研究人员之间的论文共享问题，发明了HTTP和HTML</p><p>HTML是显示文章，HTTP是传输文章。</p><p>HTTP协议 <strong>超文本<strong><strong>传输</strong></strong>协议</strong>，主要是用来传输文本、音频、视频、图片等资源信息。</p><p>协议就是一个条款，甲方应该尽什么样的义务，有什么权力；乙方应当尽什么样的义务，有什么洋的权利</p><p>通讯双方应当遵循的一个准则。发送方应该怎么去发送，按照一定的准则，接收方就可以顺利的接收到；接收方做出响应，响应也应当遵循响应的准则，同样，发送方再接收到响应方发送回来的数据时，也可以正常的解析。</p><h2 id="HTTP工作流程"><a href="#HTTP工作流程" class="headerlink" title="HTTP工作流程"></a>HTTP工作流程</h2><p>对于网络有一个认识。</p><p>IP：网络上面的机器，如果要能够进行沟通，每一台机器都需要IP地址。ip地址就是你的门牌号。</p><p>TCP：传输协议。可靠的传输协议  UDP</p><h3 id="网络模型"><a href="#网络模型" class="headerlink" title="网络模型"></a>网络模型</h3><p>网络其实是一个很复杂、庞大的组合体。为了将各个部分尽可能的简化，对于网络提出一个模型，模型的话将网络分为很多个层次，每个层次只需要关注自己这部分内容即可，然后向外提供给其他层来使用。</p><p>HTTP协议位于应用层。</p><p>工作流程：</p><p>以在浏览器窗口输入<a href="http://www.baidu.com为例/">http://www.baidu.com为例</a></p><p>1.域名解析（）：最终结果就是将域名转成ip地址。</p><p>2.建立一个可靠连接：TCP三次握手。为什么要进行三次握手？网络通讯的不可靠性。</p><p>3.发送HTTP请求（HTTP请求和HTTP协议是什么关系呢？<strong>HTTP协议就是用来规范HTTP请求应该怎么发，HTTP响应应该怎么发，应该具有某种规则，这样才可以正常地进行解析</strong>），比如</p><p>发送了一个请求，里面包含了很多的学生信息</p><p>110405199506103467 张三  25 北京</p><p>110405199506103467 李四  25 北京</p><p>110405199506103467 王五  25 北京</p><p>110405199506103467 李艮隶  25 北京</p><p>规则：</p><p>身份证号码  姓名  年龄  籍贯 \r\n</p><p>4.服务器接收到请求信息，并解析出客户端的真实意图，接下来做出HTTP响应（HTTP协议就是用来规范HTTP响应应该怎么发，不能乱发）</p><p>5.客户端拿到HTTP响应，解析，取出里面的html文档页面</p><p>6.浏览器对html进行渲染，显示页面。</p><p><strong>进一步完善</strong>：</p><p>1.域名解析（）：最终结果就是将域名转成ip地址。</p><p>2.建立一个可靠连接：TCP三次握手。为什么要进行三次握手？网络通讯的不可靠性。</p><p>3.发送HTTP请求（HTTP请求和HTTP协议是什么关系呢？<strong>HTTP协议就是用来规范HTTP请求应该怎么发，HTTP响应应该怎么发，应该具有某种规则，这样才可以正常地进行解析</strong>）</p><p>4.发出的HTTP请求，交给TCP层，TCP将HTTP请求信息给它拆解成为一个一个的片段，同时加上TCP头部</p><p>5.TCP将处理后的数据交给IP层，IP层将这些信息加上IP头部</p><p>6.IP层将数据交给链路层，经过网卡出去，在网络上一边中转一边传输。</p><p>7.到达目标机器之后，通过链路层进去，进而到达IP层，信息会脱去IP头部</p><p>8.处理完之后再次交给TCP，会将原先的信息重新拼接组装，脱去TCP头部（目的是什么?为什么要先拆解再组装呢？大片段在网络上不易传输，你邮寄了一个大包裹，快递公司会将你的包裹分为几个小包）</p><p>9.服务器接收到请求信息，并解析出客户端的真实意图，接下来做出HTTP响应（HTTP协议就是用来规范HTTP响应应该怎么发，不能乱发）</p><p>10.响应信息也会经过TCP层，拆解，加上TCP头部</p><p>11.经过IP层，加上IP头部，经过网卡出去</p><p>12.客户端主机拿到响应信息之后，再次经过相同的步骤，先脱去IP头部，再重新组装，脱去TCP头部，形成原始的响应信息</p><p>6.浏览器对html进行渲染，显示页面。</p><h2 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h2><p>HTTP协议其实就是对于请求和响应应当怎么发的一个具体规范和要求。</p><p>请求一般也称之为请求报文</p><p>响应一般也称之为响应报文</p><h3 id="请求报文"><a href="#请求报文" class="headerlink" title="请求报文"></a>请求报文</h3><p>格式如下：</p><p>请求行:请求方法  请求资源  HTTP协议版本</p><p>请求头：若干请求头</p><p>空行</p><p>请求体:可以有，也可以无</p><p><img src="HTTP&amp;Tomcat.assets/image-20201125112705705.png" alt="image-20201125112705705"></p><h4 id="请求行"><a href="#请求行" class="headerlink" title="请求行"></a>请求行</h4><p>分为三部分，请求方法、请求资源、版本协议</p><h5 id="请求方法"><a href="#请求方法" class="headerlink" title="请求方法"></a>请求方法</h5><p>用什么请求方法发送了当前的请求。常用的请求方法有哪些呢？</p><p>​                    最常用的请求方法其实只有GET、POST。</p><p>​                    GET和POST有什么样的区别呢？</p><p>对于浏览器来说</p><p>​                    GET请求如果携带请求参数，那么请求参数是附着再地址栏后面的（也就是再请求报文的请求资源后面，以?来进行分隔开，如果有多个请求参数，那么以&amp;进行连接，形式key1=value1&amp;key2=value2）</p><p>​                    POST请求携带请求参数，请求参数是再请求体（正文）里面的</p><p>如何模拟GET、POST请求</p><p>GET：1.form表单设置method=get </p><p>​            2.a标签的href，如果点击，那么默认情况下浏览器会帮我们发送GET请求</p><p><img src="HTTP&amp;Tomcat.assets/image-20201125114105177.png" alt="image-20201125114105177"></p><p>GET请求报文：</p><p>GET <a href="http://www.cskaoyan.com/?username=zsong&amp;password=asdsad">http://www.cskaoyan.com/?username=zsong&amp;password=asdsad</a> HTTP/1.1<br>Host: <a href="http://www.cskaoyan.com/">www.cskaoyan.com</a><br>Connection: keep-alive<br>Upgrade-Insecure-Requests: 1<br>User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.66 Safari/537.36<br>Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,<em>/</em>;q=0.8,application/signed-exchange;v=b3;q=0.9<br>Referer: <a href="http://localhost:63342/">http://localhost:63342/</a><br>Accept-Encoding: gzip, deflate<br>Accept-Language: zh-CN,zh;q=0.9<br>Cookie: cZBD_2132_saltkey=O3HTwAwH; cZBD_2132_lastvisit=1605840864; Hm_lvt_2504f1c08c3a31e74bbfb16ecaff376b=1605844466; cZBD_2132_sid=gb92n2; cZBD_2132_lastact=1606275643%09home.php%09misc; cZBD_2132_sendmail=1; Hm_lvt_2504f1c08c3a31e74bbfb16ecaff376b=1605844466,1606275644; Hm_lpvt_2504f1c08c3a31e74bbfb16ecaff376b=1606275644</p><p>POST请求报文：</p><p>POST <a href="http://www.cskaoyan.com/">http://www.cskaoyan.com/</a> HTTP/1.1<br>Host: <a href="http://www.cskaoyan.com/">www.cskaoyan.com</a><br>Connection: keep-alive<br>Content-Length: 29<br>Cache-Control: max-age=0<br>Upgrade-Insecure-Requests: 1<br>Origin: <a href="http://localhost:63342/">http://localhost:63342</a><br>Content-Type: application/x-www-form-urlencoded<br>User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.66 Safari/537.36<br>Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,<em>/</em>;q=0.8,application/signed-exchange;v=b3;q=0.9<br>Referer: <a href="http://localhost:63342/">http://localhost:63342/</a><br>Accept-Encoding: gzip, deflate<br>Accept-Language: zh-CN,zh;q=0.9<br>Cookie: cZBD_2132_sid=qlfVwV; cZBD_2132_lastact=1606275715%09home.php%09misc; Hm_lvt_2504f1c08c3a31e74bbfb16ecaff376b=1605844466,1606275716; Hm_lpvt_2504f1c08c3a31e74bbfb16ecaff376b=1606275716</p><p>username=zsong&amp;password=asdas</p><p>GET和POST请求方式的区别就在这吗？</p><p>注意，GET和POST请求方式的区别不是因为这个，这个仅仅是浏览器的行为。</p><p><strong>真正的区别是在于语义的区别</strong>。</p><p>制定这两个请求方法的时候，就规定</p><p>GET的语义就是用来获取资源，比如说你看到一个商品想分享给别人</p><p>POST的语义就是用来提交数据，注册、登录</p><h5 id="请求资源"><a href="#请求资源" class="headerlink" title="请求资源"></a>请求资源</h5><p>其实就是告诉给服务器，我需要哪个资源</p><h5 id="版本协议"><a href="#版本协议" class="headerlink" title="版本协议"></a>版本协议</h5><p>昨天：HTTP/0.9  HTTP/1.0</p><p>今天：HTTP/1.1(目前还是以1.1为主要的)</p><p>明天:   HTTP/2.0  HTTP/3.0</p><p>1.0和1.1的HTTP协议最大的区别在于什么地方呢？</p><p>1.1默认支持长连接。含义默认再一个TCP连接内可以发送多个HTTP请求，而无需中断当前TCP连接</p><p>但是1.0不支持，发送完一个HTTP请求，必须要断开当前TCP连接，下一次如果需要重新发送HTTP请求，需要重新进行TCP连接。</p><h4 id="请求头"><a href="#请求头" class="headerlink" title="请求头"></a>请求头</h4><p>客户端携带的传递给服务器的一些额外的信息。</p><p>Accept 表示的是客户端可以接收的资源类型，一般使用MIME类型来表示？</p><p>MIME其实就是将互联网上面的资源进行一个分类，一个大分类/一个小分类</p><p>比如对于文本 text/html  text/txt等</p><p>比如图片  image/jpeg  image/png</p><p>比如音频 audio/mp3</p><p>比如视频  video/mp4     video/mkv</p><p>Accept:浏览器可接受的    MIME类型 <em>/</em>   (大类型)/(小类型)<br>Accept-Charset: 浏览器通过这个头告诉服务器，它支持哪种字符集<br>Accept-Encoding:浏览器能够进行解码的数据编码方式，比如gzip<br>Accept-Language: 浏览器所希望的语言种类，当服务器能够提供一种以上的语言版本时要用到。 可以在浏览器中进行设置。<br>Host:初始URL中的主机和端口<br>Referer:包含一个URL，用户从该URL代表的页面出发访问当前请求的页面 （防盗链）</p><p>​    比如从1.html跳转至2.html和直接访问2.html，通过请求报文，能不能看出来？</p><p>从1.html通过form表单跳转至2.html</p><p>POST <a href="http://localhost:63342/http/demo1/2.html">http://localhost:63342/http/demo1/2.html</a> HTTP/1.1<br>Host: localhost:63342<br>Connection: keep-alive<br>Content-Length: 30<br>Cache-Control: max-age=0<br>Upgrade-Insecure-Requests: 1<br>Origin: <a href="http://localhost:63342/">http://localhost:63342</a><br>Content-Type: application/x-www-form-urlencoded<br>User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.66 Safari/537.36<br>Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,<em>/</em>;q=0.8,application/signed-exchange;v=b3;q=0.9<br>Sec-Fetch-Site: same-origin<br>Sec-Fetch-Mode: navigate<br>Sec-Fetch-User: ?1<br>Sec-Fetch-Dest: document<br><strong>Referer</strong>: <a href="http://localhost:63342/http/demo1/1.html?_ijt=h6e4ktek2k4qohnho1u382koto">http://localhost:63342/http/demo1/1.html?_ijt=h6e4ktek2k4qohnho1u382koto</a><br>Accept-Encoding: gzip, deflate, br<br>Accept-Language: zh-CN,zh;q=0.9<br>Cookie: Idea-31d5f4eb=af750744-2158-4f3c-bba9-e7eae63a38fd</p><p>username=zsong&amp;password=asdsad</p><p>直接访问2.html</p><p>GET <a href="http://localhost:63342/http/demo1/2.html">http://localhost:63342/http/demo1/2.html</a> HTTP/1.1<br>Host: localhost:63342<br>Connection: keep-alive<br>Upgrade-Insecure-Requests: 1<br>User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.66 Safari/537.36<br>Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,<em>/</em>;q=0.8,application/signed-exchange;v=b3;q=0.9<br>Sec-Fetch-Site: none<br>Sec-Fetch-Mode: navigate<br>Sec-Fetch-Dest: document<br>Accept-Encoding: gzip, deflate, br<br>Accept-Language: zh-CN,zh;q=0.9<br>Cookie: Idea-31d5f4eb=af750744-2158-4f3c-bba9-e7eae63a38fd</p><p>Content-Type:内容类型</p><p>If-Modified-Since: Wed, 02 Feb 2011 12:04:56 GMT 服务器利用这个头与服务器的文件进行比对，如果一致，则告诉浏览器从缓存中直接读取文件。自从某个时间点以来，资源有没有发生修改，如果没有直接从缓存中取，如果发生了修改，则返回最新内容。<br>User-Agent:浏览器类型.<br>Content-Length:表示请求消息正文的长度 。一般是表示请求体的长度。<br>Connection:表示是否需要持久连接。如果服务器看到这里的值为“Keep -Alive”，或者看到请求使用的是HTTP 1.1（HTTP 1.1默认进行持久连接<br>Cookie:这是最重要的请求头信息之一 。里面可以存储用户相关的数据信息。<br>Date：Date: Mon, 22 Aug 2011 01:55:39 GMT请求时间GMT</p><h3 id="响应报文"><a href="#响应报文" class="headerlink" title="响应报文"></a>响应报文</h3><p>​    服务器发送给客户端的响应信息。</p><h4 id="响应行"><a href="#响应行" class="headerlink" title="响应行"></a>响应行</h4><p>​    协议版本  状态码  原因短语</p><h5 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h5><p>​    表示这个请求对应的响应状态是什么样的，是成功还是失败，还是其他什么原因</p><p>​    200   OK</p><p>​    301、302、307 重定向</p><p>​    以访问<a href="http://www.bing.com为例/">http://www.bing.com为例</a></p><p>​    一定会搭配着一个Location响应头，需要知道往哪个地址去跳转</p><p>​    404 没有找到</p><p>​    500 服务器内部错误</p><h4 id="响应头"><a href="#响应头" class="headerlink" title="响应头"></a>响应头</h4><p>Location: <a href="http://www.cskaoyan.com/%E6%8C%87%E7%A4%BA%E6%96%B0%E7%9A%84%E8%B5%84%E6%BA%90%E7%9A%84%E4%BD%8D%E7%BD%AE%EF%BC%8C%E4%B8%80%E8%88%AC%E5%92%8C302%E3%80%81307%E7%8A%B6%E6%80%81%E7%A0%81%E6%90%AD%E9%85%8D%E4%BD%BF%E7%94%A8">http://www.cskaoyan.com/指示新的资源的位置，一般和302、307状态码搭配使用</a><br>Server: apache tomcat 指示服务器的类型<br>Content-Encoding: gzip 服务器发送的数据采用的编码类型<br>Content-Length: 80 告诉浏览器正文的长度<br>Content-Language: zh-cn服务发送的文本的语言<br>Content-Type: text/html;  服务器发送的内容的MIME类型<br>Last-Modified: Tue, 11 Jul 2000 18:23:51 GMT文件的最后修改时间<br>Refresh: 1;url=<a href="http://www.cskaoyan.com指示客户端刷新频率.单位是秒/">http://www.cskaoyan.com指示客户端刷新频率。单位是秒</a></p><p>Content-Disposition: attachment; filename=aaa.zip指示客户端保存文件<br>Set-Cookie: SS=Q0=5Lb_nQ; path=/search服务器端发送的Cookie<br>Expires: 0<br>Cache-Control: no-cache (1.1)<br>Connection: close/Keep-Alive<br>Date: Tue, 11 Jul 2000 18:23:51 GMT</p><p>空行</p><p>响应体</p><h2 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h2><p>HTTPS并不是一个全新的协议，而是再HTTP的基础上做了一层包装 Secure</p><p>HTTPS = HTTP + 加密  + 证书 + 完整性验证</p><p>HTTP存在的一些弊端：</p><p>1.传输过程完全是明文传输</p><p>​    加密。</p><p>​    加密算法：</p><p>​        对称加密：加密和解密使用同一把钥匙(速度很快)</p><p>​        非对称加密：公钥加密之后，只能使用私钥进行解密(速度很慢)</p><p>2.通讯的另一方没有验证身份，有可能是伪装者</p><p>​        证书：是一个权威机构版本的一个凭证。</p><p>3.如果请求报文或者响应报文再传输途中遭遇了更改，无从发现</p><p>http部分的要求：</p><p>1.HTTP协议的理解，请求报文、响应报文的格式</p><p>2.学会使用fiddler、chrome去抓包</p><p>检验学习成果：</p><p>浏览器地址栏输入一个网址，经历了哪些过程，呈现出最终的页面 <a href="http://www.bing.com/">http://www.bing.com</a></p><h1 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h1><h2 id="Web开发概述"><a href="#Web开发概述" class="headerlink" title="Web开发概述"></a>Web开发概述</h2><p>web其实就是网，网页、网站。客户端和服务器之间的通讯。通讯使用的就是HTTP协议。</p><p>架构可以大体上分为两大类：</p><p>B/S:browser/Server.浏览器/服务器</p><p>C/S:client/Server. 客户端/服务器</p><p>服务器就是将本地的资源发布到网络上面，供网络上的其他用户来访问。</p><h2 id="手动编写Server"><a href="#手动编写Server" class="headerlink" title="手动编写Server"></a>手动编写Server</h2><p><img src="HTTP&amp;Tomcat.assets/image-20201125162015515.png" alt="image-20201125162015515"></p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>ServerSocket<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>Socket<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 实现一个简易版的服务器 * 功能：接收请求，做出响应 * 监听某一端口号 * ServerSocket Socket */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Server</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ServerSocket serverSocket <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            serverSocket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span><span class="token number">8088</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//这一步默认情况下是阻塞的，没有请求到来会一直阻塞再这一步</span>                Socket socket <span class="token operator">=</span> serverSocket<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//下面我们需要使用多线程，原因在于如果处理socket的步骤含有阻塞步骤</span>                <span class="token comment" spellcheck="true">//那么主程序就无法持续监听可能连接来的客户端了</span>                <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">try</span> <span class="token punctuation">{</span>                            <span class="token comment" spellcheck="true">//客户端发送过来的信息，都已经帮我们封装好了，再inputStream中</span>                            <span class="token comment" spellcheck="true">//比如客户端就是浏览器，会发送HTTP请求报文过来，请求报文就再inputStream里面</span>                            Request request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Request</span><span class="token punctuation">(</span>socket<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token comment" spellcheck="true">//System.out.println("当前请求方法为：" + request.getMethod());</span>                            <span class="token comment" spellcheck="true">//System.out.println("当前请求资源为：" + request.getRequestURI());</span>                            <span class="token comment" spellcheck="true">//System.out.println("当前请求版本协议为：" + request.getProtocol());</span>                            <span class="token comment" spellcheck="true">//如果我们希望向客户端发出响应，只需要往outputStream里面写入数据即可</span>                            <span class="token comment" spellcheck="true">//请求的资源文件 如果存在的话，则将文件流写出去，如果不存在返回404响应报文</span>                            String requestURI <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getRequestURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            OutputStream outputStream <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            Response response <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Response</span><span class="token punctuation">(</span>outputStream<span class="token punctuation">,</span> requestURI<span class="token punctuation">)</span><span class="token punctuation">;</span>                            response<span class="token punctuation">.</span><span class="token function">responde</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//接收到的每一个客户端信息</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ByteArrayOutputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>InputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>Socket<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Request</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Socket socket<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 代表解析之后的请求报文     */</span>    <span class="token keyword">private</span> String reqeustText<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 请求方法     */</span>    <span class="token keyword">private</span> String method<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 请求资源     */</span>    <span class="token keyword">private</span> String requestURI<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 版本协议     */</span>    <span class="token keyword">private</span> String protocol<span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> method<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getRequestURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> requestURI<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getProtocol</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> protocol<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Request</span><span class="token punctuation">(</span>Socket socket<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>socket <span class="token operator">=</span> socket<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token function">parseRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>reqeustText <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>reqeustText<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//如果不为空，接下来将其解析出来</span>                <span class="token function">parseRequestLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">parseRequestHeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 将请求报文里面的请求头解析出来     * 可以将解析出来的请求头键值对放入map中，然后向外暴露一个方法     * 比如request.getHeader(name) 取出对应的value值     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">parseRequestHeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 解析请求报文，返回一个字符串     * 每次如果我都希望从请求报文中取出请求资源，非常不方便，将整个请求报文拆解成一个一个部分     * 利用\r\n可以将请求行拆解出来     * 其次利用 \r\n 和 \r\n\r\n中间的是请求头     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">parseRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        InputStream inputStream <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//FileOutputStream fileOutputStream = new FileOutputStream();</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> length <span class="token operator">=</span> inputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>reqeustText <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>reqeustText<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 解析请求行     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">parseRequestLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> reqeustText<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String requestLine <span class="token operator">=</span> reqeustText<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//System.out.print(requestLine);</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> strings <span class="token operator">=</span> requestLine<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>method <span class="token operator">=</span> strings<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>requestURI <span class="token operator">=</span> strings<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>protocol <span class="token operator">=</span> strings<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Response</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> OutputStream outputStream<span class="token punctuation">;</span>    <span class="token keyword">private</span> String requestURI<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Response</span><span class="token punctuation">(</span>OutputStream outputStream<span class="token punctuation">,</span> String requestURI<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>outputStream <span class="token operator">=</span> outputStream<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>requestURI <span class="token operator">=</span> requestURI<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 发送响应报文     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">responde</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>requestURI<span class="token punctuation">)</span><span class="token punctuation">;</span>        StringBuffer stringBuffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>file<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//file是一个文件</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                FileInputStream inputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                stringBuffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"HTTP/1.1 200 OK\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                stringBuffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"Content-Type: text/html\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                stringBuffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//将响应行和响应头返回给客户端</span>                outputStream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>stringBuffer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>length <span class="token operator">=</span> inputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    outputStream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//不是文件  404</span>        stringBuffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"HTTP/1.1 404 Not Found\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stringBuffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"Content-Type: text/html\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stringBuffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stringBuffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"&lt;h1 style='color:red'>File Not Found&lt;/h1>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            outputStream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>stringBuffer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="JavaEE规范"><a href="#JavaEE规范" class="headerlink" title="JavaEE规范"></a>JavaEE规范</h2><p>服务器，很多厂家，都可以设计服务器产品，供企业来选择使用。</p><p>比如服务器需要能够解析HTTP请求报文，拿到请求资源，然后才能针对性的做出响应</p><p>一家公司服务器产品，获取请求资源的API叫做request.getRequestURI</p><p>另外一家可能叫做reqeust.getRequestResource</p><p>切换服务器，对于企业来说，他的成本非常大，所有的代码全部都要更换一遍。制定一个标准， 做一个统一。</p><p>比如sun制定了一个标准，关于请求报文的话，提供了一个接口叫做ServletRequest，里面提供了很多的API，其中有一个叫做getRequestURI,接下来服务器生产厂商需要做的事情就是实现这个接口。</p><h2 id="Tomcat目录结构"><a href="#Tomcat目录结构" class="headerlink" title="Tomcat目录结构"></a>Tomcat目录结构</h2><p>logs目录非常有用，如果启动的时候发生错误，logs目录里面的文件肯定会记录下来错误日志信息。</p><p>bin目录叫做二进制文件存放目录，启停tomcat的文件再当前目录下</p><p>conf配置文件目录，如果需要配置tomcat，需要再该目录下</p><p>webapps，如果希望部署静态资源，需要再该目录下</p><h2 id="Tomcat启停"><a href="#Tomcat启停" class="headerlink" title="Tomcat启停"></a>Tomcat启停</h2><p>启动</p><p>​    1.直接双击startup.bat文件</p><p>​        直接访问<a href="http://localhost:8080即可">http://localhost:8080即可</a></p><p>​    2.通过cmd进入到tomcat的安装目录/bin目录下，执行startup即可</p><p>常见报错信息：</p><p><strong>如果没有正确的配置JAVA_HOME，那么双击startup.bat会一闪而过，一般情况下是JAVA_HOME环境变量失效</strong></p><p>停止</p><p>​        1.双击shutdown.bat</p><p>​        2.通过cmd进入到tomcat的安装目录/bin目录下，执行shutdown即可</p><p>​        3.直接再tomcat的启动窗口上面执行ctrl + c</p><h2 id="Tomcat部署资源"><a href="#Tomcat部署资源" class="headerlink" title="Tomcat部署资源"></a>Tomcat部署资源</h2><p>如果希望将一个资源文件部署再tomcat中，那么一定要再tomcat里面新建一个应用，将资源文件放在应用里面才可以。tomcat里面最小的单元是应用。</p><p>新建一个应用最简单的一个方式，其实就是再tomcat的webapps目录下新建一个目录，那么这个目录就是一个应用，当前目录的名称就是应用的名称。</p><p>tomcat部署资源有两种方式</p><h3 id="直接部署"><a href="#直接部署" class="headerlink" title="直接部署"></a>直接部署</h3><h4 id="开放式目录"><a href="#开放式目录" class="headerlink" title="开放式目录"></a>开放式目录</h4><p>直接再tomcat的webapps目录下新建一个目录，然后将资源文件放置再该目录中即可。</p><p>如何访问到部署的资源文件呢？</p><p>当你输入<a href="http://localhost:8080,这个时候tomcat会到webapps目录，接下来如何希望访问某个资源，**只需要指明它和webapps的相对路径关系即可**。">http://localhost:8080,这个时候tomcat会到webapps目录，接下来如何希望访问某个资源，**只需要指明它和webapps的相对路径关系即可**。</a></p><h4 id="打成war包"><a href="#打成war包" class="headerlink" title="打成war包"></a>打成war包</h4><p>war包就是类似于压缩包，直接放置再tomcat的webapps目录下，tomcat启动会自动将其解压缩成为一个开放式目录，目录的名称就是你的war包的名称。</p><h3 id="虚拟映射"><a href="#虚拟映射" class="headerlink" title="虚拟映射"></a>虚拟映射</h3><p>虚拟映射的概念是说如果不希望再webapps目录下部署，但是也希望资源能够被访问到，那么tomcat给我们提供了一种方式，虚拟映射到某个位置，叫做虚拟映射。</p><h4 id="conf-Catalina-localhost目录下新增-应用名-xml文件（非常重要）"><a href="#conf-Catalina-localhost目录下新增-应用名-xml文件（非常重要）" class="headerlink" title="conf/Catalina/localhost目录下新增 应用名.xml文件（非常重要）"></a>conf/Catalina/localhost目录下新增 应用名.xml文件（非常重要）</h4><p>比如新增app2.xml文件</p><!--?xml version="1.0" encoding="UTF-8"?--><context docbase="D:\app"><p>当访问<a href="http://localhost:8080/app2%E6%97%B6%EF%BC%8C%E7%9B%B8%E5%BD%93%E4%BA%8E%E4%B8%80%E5%AE%9A%E5%AE%9A%E4%BD%8D%E5%88%B0docBase%E6%8C%87%E5%90%91%E7%9A%84%E8%B7%AF%E5%BE%84%E4%BA%86%E3%80%82%E9%82%A3%E4%B9%88%E9%9C%80%E8%A6%81%E8%AE%BF%E9%97%AE%E6%9F%90%E4%B8%AA%E8%B5%84%E6%BA%90%EF%BC%8C%E5%8F%AA%E9%9C%80%E8%A6%81%E6%8C%87%E5%87%BA%E5%AE%83%E5%92%8CdocBase%E7%9A%84%E7%9B%B8%E5%AF%B9%E8%B7%AF%E5%BE%84%E5%85%B3%E7%B3%BB%E5%8D%B3%E5%8F%AF%E3%80%82">http://localhost:8080/app2时，相当于一定定位到docBase指向的路径了。那么需要访问某个资源，只需要指出它和docBase的相对路径关系即可。</a></p><h4 id="conf-server-xml文件增加配置项"><a href="#conf-server-xml文件增加配置项" class="headerlink" title="conf/server.xml文件增加配置项"></a>conf/server.xml文件增加配置项</h4><p>需要再<strong>Host节点下面新增一个Context节点</strong></p><context docbase="D:\app" path="/app3"><p>注意事项：Context注意大小写；</p><p>需要特别注意的时不管哪种虚拟映射，还是可以通过部署开放式目录或者war包，都可以。</p><h2 id="Tomcat的请求处理流程"><a href="#Tomcat的请求处理流程" class="headerlink" title="Tomcat的请求处理流程"></a>Tomcat的请求处理流程</h2><p>Tomcat是组件化的应用，可以对server.xml文件进行相应的修改，那么tomcat再启动的时候就会读取server.xml文件里面的配置项，利用这些配置项，生成对应的组件对象。</p><p>组件对象类似于<strong>俄罗斯套娃</strong>，大娃娃套着小娃娃。</p><p><a href="http://localhost:8080/app/1.txt">http://localhost:8080/app/1.txt</a></p><p>1.请求到达服务器之后，被监听8080端口号的HTTP/1.1的Connector接收到，它的主要职责就是将请求报文解析成为一个Request对象，同时还会给我们提供一个Response对象</p><p>2.它会将这两个对象交给Engine来处理，Engine的主要职责就是来选择一个合适的Host来处理接下来的请求（<strong>行政区域</strong>）,选择一个Host将这两个对象进行进一步的下发，如果没有找到合适的Host，那么请求依然会交给localhost来处理</p><p>3.Host的主要职责依然是选择一个合适的Context来处理，（Context来源于哪？webapps下面的每一个目录，conf/server.xml里面的Context节点、conf/Catalina/localhost下面  xml文件，这些再tomcat启动的时候都会被扫描，然后形成一个一个Context对象）</p><p>4.Host选择合适的Context之后，将这两个对象交给对应的Context对象来处理，寻找当前应用下有没有一个1.txt文件。如果找到，则将1.txt的文件流写入到Response中，如果没有找到，则写入一个404信息到response中</p><p>5.这两个对象再次从Context、Host、Engine、Connector返回，Connector会读取Response里面的内容，按照HTTP协议对于响应报文的要求，组织形成一个HTTP响应报文，发送出去。</p><h2 id="Tomcat配置"><a href="#Tomcat配置" class="headerlink" title="Tomcat配置"></a>Tomcat配置</h2><h3 id="配置默认端口号"><a href="#配置默认端口号" class="headerlink" title="配置默认端口号"></a>配置默认端口号</h3><p>我们经常访问网站会看到并没没有携带端口号，比如<a href="http://www.cskaoyan.com/">http://www.cskaoyan.com</a></p><p><a href="http://localhost:8080/">http://localhost:8080</a></p><p>对于HTTP协议来说，有一个默认端口号80</p><h3 id="配置默认访问应用"><a href="#配置默认访问应用" class="headerlink" title="配置默认访问应用"></a>配置默认访问应用</h3><p>对于绝大多数的应用访问的话都是/应用名来访问，但是有一个特例，ROOT应用，如果希望访问ROOT应用里面的资源，不需要写应用名，直接省略即可。</p><h3 id="配置默认访问资源"><a href="#配置默认访问资源" class="headerlink" title="配置默认访问资源"></a>配置默认访问资源</h3><p>比如访问<a href="http://localhost也可以正常访问到页面，那么它访问的是谁呢？首先访问的肯定是ROOT应用里面的，那么该应用里面的哪个资源呢？如果没有指明访问的资源，那么其实访问的是系统配置的默认访问资源。">http://localhost也可以正常访问到页面，那么它访问的是谁呢？首先访问的肯定是ROOT应用里面的，那么该应用里面的哪个资源呢？如果没有指明访问的资源，那么其实访问的是系统配置的默认访问资源。</a></p><p>再tomcat的conf/web.xml文件中有如下配置</p><pre class=" language-xml"><code class="language-xml">   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>welcome-file-list</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>welcome-file</span><span class="token punctuation">></span></span>index.html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>welcome-file</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>welcome-file</span><span class="token punctuation">></span></span>index.htm<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>welcome-file</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>welcome-file</span><span class="token punctuation">></span></span>index.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>welcome-file</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>welcome-file-list</span><span class="token punctuation">></span></span></code></pre><p>表示的是如果没有指明具体的访问资源，那么tomcat会从里面配置的文件去查找，找到则结束，找不到则显示404.</p><p>比如访问<a href="http://localhost,首先肯定访问的是root应用,接下来,会再root应用里面寻找index.html/">http://localhost,首先肯定访问的是ROOT应用，接下来，会再ROOT应用里面寻找index.html</a>  index.htm  index.jsp依次去查找，如果找到，则结束，不会再继续，如果没有找到，继续往下找，直至找到最后。</p><p>提问：如果希望直接访问localhost来访问到你的资源文件，应该怎么做。</p></context></context>]]></content>
      
      
      <categories>
          
          <category> JavaEE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="2021/01/16/java-yu-fa-ji-chu/"/>
      <url>2021/01/16/java-yu-fa-ji-chu/</url>
      
        <content type="html"><![CDATA[<h1 id="Java语法基础"><a href="#Java语法基础" class="headerlink" title="Java语法基础"></a>Java语法基础</h1><p>[TOC]</p><h2 id="关键字和保留字"><a href="#关键字和保留字" class="headerlink" title="关键字和保留字"></a>关键字和保留字</h2><h3 id="关键字（Key-Word）"><a href="#关键字（Key-Word）" class="headerlink" title="关键字（Key Word）"></a>关键字（Key Word）</h3><blockquote><p>什么是关键字？</p></blockquote><ul><li>关键字就是被Java语法赋予特定含义的单词</li></ul><blockquote><p>关键字有什么作用？</p></blockquote><ul><li><p>关键字对编译器有特殊意义，他们用来表示一种数据类型或者表示程序的结构</p></li><li><p>class</p></li></ul><blockquote><p>关键字有什么特点？</p></blockquote><ul><li>关键字必须全部小写</li></ul><h3 id="保留字（Reserve-Word）"><a href="#保留字（Reserve-Word）" class="headerlink" title="保留字（Reserve Word）"></a>保留字（Reserve Word）</h3><blockquote><p>什么是保留字？</p></blockquote><ul><li>保留字是对当前版本的Java并没有特殊含义的单词<ul><li>但是，以后的版本可能会变成具有特殊含义的单词，将其升级为关键字</li><li>即便以后也不打算升级为关键字，但是Java官方认为你不应该在Java代码中使用的单词</li></ul></li></ul><blockquote><p>有哪些保留字？</p></blockquote><ul><li>const</li><li>goto</li></ul><h3 id="关键字和保留字的语法意义"><a href="#关键字和保留字的语法意义" class="headerlink" title="关键字和保留字的语法意义"></a>关键字和保留字的语法意义</h3><ul><li><strong>关键字和保留字均不能用作变量名、方法名、类名、包名和参数</strong></li><li>由于大家使用比较高级的集成开发环境，关键字是有特殊颜色标记的</li></ul><blockquote><p>课堂抽奖</p></blockquote><p>以下哪些是关键字？</p><p>class，HelloWorld，public，static，void，main，String，System</p><h3 id="Java关键字大全"><a href="#Java关键字大全" class="headerlink" title="Java关键字大全"></a>Java关键字大全</h3><table><thead><tr><th>关键字</th><th>含义</th></tr></thead><tbody><tr><td>abstract</td><td>表明类或者成员方法具有抽象属性</td></tr><tr><td>assert</td><td>用来进行程序调试</td></tr><tr><td>boolean</td><td>基本数据类型之一，布尔类型</td></tr><tr><td>break</td><td>提前跳出一个块</td></tr><tr><td>byte</td><td>基本数据类型之一，字节类型</td></tr><tr><td>case</td><td>用在switch语句之中，表示其中的一个分支</td></tr><tr><td>catch</td><td>用在异常处理中，用来捕捉异常</td></tr><tr><td>char</td><td>基本数据类型之一，字符类型</td></tr><tr><td>class</td><td>类</td></tr><tr><td><font color="red">const</font></td><td>保留关键字，没有具体含义</td></tr><tr><td>continue</td><td>回到一个块的开始处</td></tr><tr><td>default</td><td>默认，例如，用在switch语句中，表明一个默认的分支</td></tr><tr><td>do</td><td>用在do-while循环结构中</td></tr><tr><td>double</td><td>基本数据类型之一，双精度浮点数类型</td></tr><tr><td>else</td><td>用在条件语句中，表明当条件不成立时的分支</td></tr><tr><td>enum</td><td>枚举</td></tr><tr><td>extends</td><td>表明一个类型是另一个类型的子类型，这里常见的类型有类和接口</td></tr><tr><td>final</td><td>用来说明最终属性，表明一个类不能派生出子类，或者成员方法不能被覆盖，或者成员域的值不能被改变，用来定义常量</td></tr><tr><td>finally</td><td>用于处理异常情况，用来声明一个基本肯定会被执行到的语句块</td></tr><tr><td>float</td><td>基本数据类型之一，单精度浮点数类型</td></tr><tr><td>for</td><td>一种循环结构的引导词</td></tr><tr><td><font color="red">goto</font></td><td>保留关键字，没有具体含义</td></tr><tr><td>if</td><td>条件语句的引导词</td></tr><tr><td>implements</td><td>表明一个类实现了给定的接口</td></tr><tr><td>import</td><td>表明要访问指定的类或包</td></tr><tr><td>instanceof</td><td>用来测试一个对象是否是指定类型的实例对象</td></tr><tr><td>int</td><td>基本数据类型之一，整数类型</td></tr><tr><td>interface</td><td>接口</td></tr><tr><td>long</td><td>基本数据类型之一，长整数类型</td></tr><tr><td>native</td><td>用来声明一个方法是由与计算机相关的语言(如C/C++/FORTRAN语言)实现的</td></tr><tr><td>new</td><td>用来创建新实例对象</td></tr><tr><td>package</td><td>包</td></tr><tr><td>private</td><td>一种访问控制方式:私用模式</td></tr><tr><td>protected</td><td>一种访问控制方式:保护模式</td></tr><tr><td>public</td><td>一种访问控制方式:共用模式</td></tr><tr><td>return</td><td>从成员方法中返回数据</td></tr><tr><td>short</td><td>基本数据类型之一,短整数类型</td></tr><tr><td>static</td><td>表明具有静态属性</td></tr><tr><td>strictfp</td><td>用来声明FP_strict(单精度或双精度浮点数)表达式遵循IEEE 754算术规范</td></tr><tr><td>super</td><td>表明当前对象的父类型的引用或者父类型的构造方法</td></tr><tr><td>switch</td><td>分支语句结构的引导词</td></tr><tr><td>synchronized</td><td>表明一段代码需要同步执行</td></tr><tr><td>this</td><td>指向当前实例对象的引用</td></tr><tr><td>throw</td><td>抛出一个异常</td></tr><tr><td>throws</td><td>声明在当前定义的成员方法中所有需要抛出的异常</td></tr><tr><td>transient</td><td>声明不用序列化的成员域</td></tr><tr><td>try</td><td>尝试一个可能抛出异常的程序块</td></tr><tr><td>void</td><td>声明当前成员方法没有返回值</td></tr><tr><td>volatile</td><td>表明两个或者多个变量必须同步地发生变化</td></tr><tr><td>while</td><td>用在循环结构中</td></tr></tbody></table><h2 id="标识符（Identifier）"><a href="#标识符（Identifier）" class="headerlink" title="标识符（Identifier）"></a>标识符（Identifier）</h2><blockquote><p>什么是标识符？</p></blockquote><ul><li>标识符是给包，类，接口，方法，变量等起名字时使用的字符序列</li></ul><h3 id="虚假的标识符命名规则（语法）"><a href="#虚假的标识符命名规则（语法）" class="headerlink" title="虚假的标识符命名规则（语法）"></a>虚假的标识符命名规则（语法）</h3><blockquote><p>标识符的语法规则是什么？</p></blockquote><ul><li>标识符的组成<ul><li>数字（0~9）</li><li>字母（A<del>Z 和 a</del>z）</li><li>美元符号（$）</li><li>下划线（_）</li><li>Unicode 字符集中符号大于 0xC0 的所有符号</li></ul></li><li>标识符的开头<ul><li>字母（A<del>Z 和 a</del>z）</li><li>下划线（_）</li><li>美元符号（$）</li><li>Unicode 字符集中符号大于 0xC0 的所有符号</li></ul></li><li>注意事项<ul><li>标识符不能以数字开头</li><li>不能是Java中的关键字和保留字</li><li>标识符区分大小写</li></ul></li></ul><blockquote><p>课堂抽奖</p></blockquote><p>以下标识符命名合法的有哪些？</p><p>HelloWorld，_985，$bS5_c7，class，Class ，DataClass#，98.3，Hello  World</p><h3 id="真实的标识符组成规则（基于语法的约定）"><a href="#真实的标识符组成规则（基于语法的约定）" class="headerlink" title="真实的标识符组成规则（基于语法的约定）"></a>真实的标识符组成规则（基于语法的约定）</h3><p>以上只是语法范畴的标识符规则，但就像人可以起名叫“张三，李四”，但几乎没人这么做一样</p><p><font color="red">在符合语法的前提下</font>，标识符还有一套约定俗成的命名规则，详见《阿里巴巴Java开发规范》</p><blockquote><p>真实的标识符组成规则</p></blockquote><ul><li>符合语法</li><li>只能用英文字母、数字（下划线、美元符号几乎不使用）</li><li>包命名标识符<ul><li>Java中的包类似操作系统中的文件夹</li><li>包的命名，以反转公司域名为规范</li><li>包名应该全部小写</li><li>多级包名以点（.）分隔</li></ul></li><li>类、接口等命名标识符<ul><li>大驼峰命名法</li></ul></li><li>变量、方法的命名标识符<ul><li>小驼峰命名法</li></ul></li><li>常量的命名标识符<ul><li>全部大写（建议）</li><li>多个单词之间用下划线（_）隔开</li></ul></li></ul><blockquote><p>给人起名字也追求好听吉祥，标识符起名也有自己的追求</p></blockquote><ul><li>核心追求是“见名知意”，应该赋予标识符一个有意义、有用途的名字</li></ul><h3 id="驼峰命名法"><a href="#驼峰命名法" class="headerlink" title="驼峰命名法"></a>驼峰命名法</h3><h4 id="小驼峰式命名法（lower-camel-case）"><a href="#小驼峰式命名法（lower-camel-case）" class="headerlink" title="小驼峰式命名法（lower camel case）"></a>小驼峰式命名法（lower camel case）</h4><ul><li>多个单词组合成一个字符串<ul><li>第一个单词的首字母<strong>小写</strong></li><li>从第二个单词开始，首字母都要大写</li></ul></li><li>例如：myName，myFirstJavaProgram</li></ul><h4 id="大驼峰式命名法（upper-camel-case）"><a href="#大驼峰式命名法（upper-camel-case）" class="headerlink" title="大驼峰式命名法（upper camel case）"></a>大驼峰式命名法（upper camel case）</h4><ul><li>多个单词组合成一个字符串<ul><li>第一个单词的首字母<strong>大写</strong></li><li>从第二个单词开始，首字母都要大写</li></ul></li><li>例如：MyName，MyFirstJavaProgram</li></ul><h2 id="注释（comment）"><a href="#注释（comment）" class="headerlink" title="注释（comment）"></a>注释（comment）</h2><blockquote><p>什么是注释？</p></blockquote><ul><li>注释是可以嵌入到Java代码的任何位置的，一种解释说明性的文字</li></ul><blockquote><p>注释有什么作用？</p></blockquote><ul><li>方便自己写代码的时候，记录程序的信息</li><li>增加代码的可读性<ul><li>过段时间后，自己也能很快想起来，自己写的代码是干什么的</li><li>最重要的，方便别人能看懂自己的代码</li></ul></li><li>写注释可以增加自己写代码的逻辑性<ul><li>编码之前先用注释，标注好需要做的事情，先搞明白思路，再写代码</li><li>编码实际上就是思想的体现</li></ul></li><li>注释也可以作为一种比较简单但十分好用有效的，debug的方式<ul><li>将可能出错的代码注释掉，再运行程序，直到找出bug</li></ul></li></ul><blockquote><p>注释的语法</p></blockquote><p>Java支持三种注释的语法格式</p><ul><li><p>单行注释</p><pre class=" language-Java"><code class="language-Java">//注释的文字</code></pre></li><li><p>多行注释</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*注释的文字*/</span></code></pre></li><li><p>文档注释</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**注释的文字*/</span></code></pre></li></ul><blockquote><p>注释的使用注意事项</p></blockquote><ul><li>多行注释和文档注释不要嵌套使用</li><li>注释不参与编译，编译器会自动丢掉代码中的注释部分</li><li>JDK中提供了<strong>javadoc.exe</strong>工具，用于将文档注释输出到一个HTML文件中</li></ul><h2 id="常量与变量"><a href="#常量与变量" class="headerlink" title="常量与变量"></a>常量与变量</h2><blockquote><p>程序运行中，内存中有很多数据参与运算</p><ul><li>Java使用变量来存储这些数据</li><li>程序运行中，值不变的变量就是常量</li></ul></blockquote><h3 id="常量（constant）"><a href="#常量（constant）" class="headerlink" title="常量（constant）"></a>常量（constant）</h3><blockquote><p>什么是常量？</p></blockquote><ul><li>在程序运行过程中，其值不会发生改变的量</li></ul><blockquote><p>常量有哪些分类？</p></blockquote><ul><li>字面值常量（<strong>literal</strong>）<ul><li>字符串常量：双引号引起来的内容<ul><li>“Hello World！”</li></ul></li><li>整数常量：所有的整数<ul><li>1，2，3</li></ul></li><li>小数常量：所有的小数<ul><li>1.1，1.2</li></ul></li><li>字符常量：单引号引起来的内容<ul><li>‘W’，’E’，</li></ul></li><li>布尔常量<ul><li>只有true和false</li></ul></li><li>空常量<ul><li>只有null</li></ul></li></ul></li><li>自定义常量（面向对象详细讲）</li></ul><h3 id="变量（variable）"><a href="#变量（variable）" class="headerlink" title="变量（variable）"></a>变量（variable）</h3><blockquote><p>什么是变量？</p></blockquote><ul><li>程序运行期间，其值在某个范围内，可能会发生改变的量</li><li>可以将变量理解成未知数X</li></ul><blockquote><p>怎么定义一个能够使用的变量</p></blockquote><ul><li>两步走：先声明变量，再初始化变量（赋值）</li></ul><h4 id="声明（declaration）变量"><a href="#声明（declaration）变量" class="headerlink" title="声明（declaration）变量"></a>声明（declaration）变量</h4><blockquote><p>什么是声明变量？</p></blockquote><ul><li>告诉编译器，变量的数据类型，变量的名字</li></ul><blockquote><p>声明变量的语法</p></blockquote><pre class=" language-Java"><code class="language-Java">数据类型 变量名;</code></pre><blockquote><p>课堂抽奖</p></blockquote><p>声明后的变量能够直接使用吗？</p><h4 id="初始化（initialization）变量"><a href="#初始化（initialization）变量" class="headerlink" title="初始化（initialization）变量"></a>初始化（initialization）变量</h4><blockquote><p>什么是初始化变量</p></blockquote><ul><li>就是给变量赋值，声明一个变量后，必须由程序员显式的进行赋值操作，这个变量才能够使用</li></ul><blockquote><p>初始化变量的语法</p></blockquote><pre class=" language-Java"><code class="language-Java">变量名 = 变量值;</code></pre><p>声明和初始化可以合起来</p><pre><code>数据类型 变量名 = 变量名;</code></pre><h4 id="使用变量的注意事项"><a href="#使用变量的注意事项" class="headerlink" title="使用变量的注意事项"></a>使用变量的注意事项</h4><ul><li>变量有效的范围，这个范围通常用{}来界定，同样一个{}不能有同名变量</li><li>变量必须显式初始化，否则只能看不能使用</li><li>一行一个语句可以定义多个同数据类型的变量，用逗号隔开<ul><li>但是一行定义多个变量会影响代码的阅读性，一般不要一行定义多个变量</li></ul></li></ul><h2 id="基本数据类型和引用数据类型"><a href="#基本数据类型和引用数据类型" class="headerlink" title="基本数据类型和引用数据类型"></a>基本数据类型和引用数据类型</h2><p>Java是强类型语言，每一个变量都必须有它的数据类型，并且变量之间不能随便转换数据类型</p><p>主流的语言大多都是强类型 C、C++、Java、python</p><p>弱类型语言</p><p>PHP</p><blockquote><p>什么是数据类型？</p></blockquote><ul><li>数据类型，表示的是一个数据集合和基于该数据集合的一组合法操作</li></ul><blockquote><p>数据类型怎么分类？</p></blockquote><ul><li>基本数据类型：JDK默认提供</li><li>引用数据类型<ul><li>类</li><li>接口</li><li>….</li></ul></li></ul><h3 id="基本数据类型（base-date-type）"><a href="#基本数据类型（base-date-type）" class="headerlink" title="基本数据类型（base date type）"></a>基本数据类型（base date type）</h3><blockquote><p>有哪些基本数据类型？</p></blockquote><blockquote><p>四类八种</p></blockquote><ul><li>整型<ul><li>byte：字节，1个字节空间</li><li>short：短整型，占2个字节空间</li><li>int：整型，占4个字节空间</li><li>long：长整型，占8个字节空间</li><li>注意：Java当中的整数字面值常量，默认当作int处理<ul><li>如果你想要一个整数字面值常量数据类型为long，需要在后缀上加l或L，推荐L</li></ul></li></ul></li><li>浮点型<ul><li>float：单精度浮点型，占4个字节</li><li>double：双精度浮点型，占8个字节</li><li>注意：Java当中的浮点数，默认当作double处理<ul><li>如果你想要一个浮点数字面值常量数据类型为float，需要在后缀上加f或F，推荐</li></ul></li></ul></li><li>字符类型<ul><li>char：占4个字节，表示单个字符</li></ul></li><li>布尔类型<ul><li>boolean：具体占多少内存，了解即可<ul><li>根据JVM规范，在内存中boolean当作int处理，占4个字节</li><li>boolean数组当成byte数组处理，一个boolean元素占1个字节</li></ul></li></ul></li></ul><h4 id="基本数值类型的取值范围"><a href="#基本数值类型的取值范围" class="headerlink" title="基本数值类型的取值范围"></a>基本数值类型的取值范围</h4><table><thead><tr><th>基本数据类型</th><th>字节长度</th><th>大小（位）</th><th>最小值</th><th>最大值</th><th>取值范围</th></tr></thead><tbody><tr><td><strong>byte</strong></td><td>1字节</td><td>8bit</td><td>-2^7</td><td>2^7-1</td><td>-128 ~ 127</td></tr><tr><td><strong>short</strong></td><td>2字节</td><td>16bit</td><td>-2^15</td><td>2^15-1</td><td>-32768 ~ 32767</td></tr><tr><td><strong>int</strong></td><td>4字节</td><td>32bit</td><td>-2^31</td><td>2^31-1</td><td>-2147483648 ~ 2147483647（21亿出头）</td></tr><tr><td><strong>long</strong></td><td>8字节</td><td>64bit</td><td>-2^63</td><td>2^63-1</td><td>-9223372036854774808 ~ 9223372036854774807（大概922亿亿）</td></tr><tr><td><strong>float</strong></td><td>4字节</td><td>32bit</td><td>-</td><td>-</td><td>-3.403E38<del>3.404E38（有效位数7</del>8位）</td></tr><tr><td><strong>double</strong></td><td>8字节</td><td>64bit</td><td>-</td><td>-</td><td>-1.798E308<del>1.798E308（有效数字16</del>17位）</td></tr></tbody></table><h4 id="浮点型的精度问题"><a href="#浮点型的精度问题" class="headerlink" title="浮点型的精度问题"></a>浮点型的精度问题</h4><blockquote><p>什么是精度问题？</p><p>计算的结果的数据类型，或者新的数据类型无法容纳全部的数据，导致部分信息被截断丢失，数据失真</p><p>专业名词就叫做“精度丢失”</p></blockquote><blockquote><p>经典的案例</p></blockquote><ul><li>计算10/3</li><li>计算1-0.9</li></ul><blockquote><ul><li><p>正数十进制转换成二进制，除2直到商为0，取余数倒过来</p></li><li><p>负数十进制转换成二进制，先算出正数的二进制数,取反+1</p></li><li><p>正小数转换成二进制，用小数部分乘以2，取结果的整数部分(必然是1或者0)，</p><ul><li>然后小数部分继续乘2</li><li> 直到小数部分为0,或者已经达到了最大的位数</li><li>最终的结果（0.开头）正序排列</li></ul></li></ul></blockquote><p>结论：浮点运算很少是精确的，只要是超过精度能表示的范围就会产生误差，生产环境慎用浮点数进行计算</p><p>最好的解决办法是用BigDecimal 替代float和double进行浮点数计算</p><h3 id="引用数据类型（reference）"><a href="#引用数据类型（reference）" class="headerlink" title="引用数据类型（reference）"></a>引用数据类型（reference）</h3><blockquote><p>碍于知识点的限制，目前只要知道字符串（String）是一种引用数据类型即可</p><p>String属于引用数据类型中的类</p></blockquote><h3 id="基本数据类型的数据类型转换（conversion）"><a href="#基本数据类型的数据类型转换（conversion）" class="headerlink" title="基本数据类型的数据类型转换（conversion）"></a>基本数据类型的数据类型转换（conversion）</h3><blockquote><p>什么是数据类型转换呢？</p></blockquote><ul><li>Java是强类型语言，变量一旦声明后，数据类型不会轻易改变，但也并非完全不可能改变</li><li>我们将Java中变量的数据类型由某一种转换为另一种，这个过程叫做数据类型转换</li></ul><blockquote><p>数据类型转换的分类</p></blockquote><ul><li>自动类型转换，也叫向上转型<ul><li>向上转型只是自动类型转换的一种说法，这种说法只针对引用数据类型</li></ul></li><li>强制类型转换，也叫向下转型<ul><li>向下转型只是自动类型转换的一种说法，这种说法只针对引用数据类型</li></ul></li></ul><h4 id="基本数据类型的自动类型转换（automatic）"><a href="#基本数据类型的自动类型转换（automatic）" class="headerlink" title="基本数据类型的自动类型转换（automatic）"></a>基本数据类型的自动类型转换（automatic）</h4><blockquote><p>什么是自动类型转换？</p></blockquote><ul><li>数据类型无需程序员操作，由系统自动转换</li></ul><blockquote><p>基本数据类型的自动类型转换的规则</p><p>“小取值范围”转换为“大取值范围”发生自动类型转换（浮点数都比long取值范围大）</p></blockquote><ul><li>byte、short、char之间不互相转换，一旦之间发生运算，一律自动转换为int进行运算，结果是int</li><li>byte、short、char任一数据类型与int进行计算，一律自动转换为int进行计算，结果是int</li><li>byte、short、char、int任一数据类型与long进行计算，一律自动转换为long进行计算，结果是long</li><li>byte、short、char、int、long任一数据类型与float进行计算，一律自动转换为float进行计算，结果是float</li><li>byte、short、char、int、long、float任一数据类型与double进行计算，一律自动转换为double进行计算，结果是double</li></ul><blockquote><p>精度问题</p><p>“小容量”不一定是“小取值范围”——所有浮点类型都比long取值范围大</p><p>但是由于浮点数本身的问题，整型的内存表示方式也和浮点型完全不同，很容易产生精度丢失</p></blockquote><ul><li>当int、long（4字节，8字节）自动转换成float（4字节）时，可能会有精度损失</li><li>当long自动转换成double（8字节）时，也可能产生精度损失</li><li>不要用浮点型计算小数，除非对精度十分不敏感</li></ul><p><img src="../../../../markdown_picture/%E8%87%AA%E5%8A%A8%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E4%B8%AD%E7%9A%84%E7%B2%BE%E5%BA%A6%E4%B8%A2%E5%A4%B1-1610771799581.png" alt="image-20210101011533113"></p><h4 id="基本数据类型的强制类型转换（cast）"><a href="#基本数据类型的强制类型转换（cast）" class="headerlink" title="基本数据类型的强制类型转换（cast）"></a>基本数据类型的强制类型转换（cast）</h4><blockquote><p>什么是强制类型转换</p></blockquote><ul><li>数据类型的转换需要程序员显式操作，否则报错</li></ul><blockquote><p>什么时候需要强制类型转换</p></blockquote><ul><li>在特别有必要的情况下，把一个占内存大的数据类型，转换成小的数据类型，比如int—-&gt;byte</li></ul><blockquote><p>语法</p></blockquote><pre class=" language-java"><code class="language-java">目标数据类型 变量名 <span class="token operator">=</span> <span class="token punctuation">(</span>目标数据类型<span class="token punctuation">)</span><span class="token punctuation">(</span>被转换的变量变量名<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>精度问题</p></blockquote><ul><li>强制类型转换，大变小，精度损失是很常见的</li><li>强烈建议，如果不是不进行强制类型转换，程序就GG，不要使用强制类型转换，稍有不慎会导致bug</li><li>进行强制类型转换，要严格考量，数据类型的取值范围，像(byte)200这种行为是很滑稽的</li></ul><blockquote><p>补充</p></blockquote><ul><li>boolean类型和其他数据类型之间不能通过强制类型转换语法直接转换</li></ul><pre><code>基本数据类型的类型转换，总结出规律1，八种基本数据类型中，只有boolean类型不能直接进行类型转换，其他七种都可以互相转换2，byte、short、char使用的时候尤其注意取值范围，若参与运算都会自动提升到int3，“小取值范围”---&gt;“大取值范围”称之为自动类型转换，排序是    byte &lt; short(char) &lt; int &lt; long &lt; float &lt; double4，“大取值范围”---&gt;“小取值范围”称之为强制类型转换，必须要显式处理，否则报错    强制类型转换，很容易精度丢失，慎用5，多种数据类型混合在一起进行运算，先全部提升为“最大取值范围”的数据类型，再进行计算6，不同的数据类型，不能够直接运算</code></pre><blockquote><p>小练习1</p><p>​     byte b1 = 1, b2 = 2, b;</p><p>​     b = b1+ b2;</p><p>​     b= 1 + 2;</p><p>​     哪句是编译失败的呢？为什么呢？</p></blockquote><blockquote><p>小练习2</p><p>​     byte b = 130;</p><p>​     这句代码有没有问题？</p><p>​    如有问题，咋整？</p></blockquote><blockquote><p>小练习3</p><p>请写出下列程序结果</p><p>System.out.println(‘a’);</p><p>System.out.println(‘a’+1);</p><p>System.out.println(“hello”+’a’+1);</p><p>System.out.println(‘a’+1+”hello”);</p><p>System.out.println(“5+5”+5+5);</p><p>System.out.println(5+5+”=5+5”);</p></blockquote><p>补充：</p><blockquote><p>有符号的数据表示法——原码，反码，补码</p></blockquote><p>计算机中的数据是二进制的，不像生活中用符号表示负数一样那么简单，在计算机中，有符号数的表示分为三种</p><p><font color="red">注意：所有的数据运算都是采用补码形式进行</font></p><ul><li>原码<ul><li>有效数字是其绝对值的二进制表示</li><li>最高位负数是0，正数是1</li><li>有效数字和最高位之间用0补充</li><li>除了最高位符号位外，其余位置都是数值位</li></ul></li><li>反码<ul><li>正数的反码与原码相同</li><li>负数的反码是对其原码逐位取反，符号位除外</li></ul></li><li>补码<ul><li>正数的补码与原码相同</li><li>负数的补码是在其反码上加1</li><li>反码+1=补码</li><li>反码=补码-1</li></ul></li></ul><p>附录：</p><blockquote><p>ASCII码表</p></blockquote><table><thead><tr><th align="left">ASCII值</th><th align="left">控制字符</th><th align="left">ASCII值</th><th align="left">控制字符</th><th align="left">ASCII值</th><th align="left">控制字符</th><th align="left">ASCII值</th><th align="left">控制字符</th></tr></thead><tbody><tr><td align="left">0</td><td align="left">NUT</td><td align="left">32</td><td align="left">(space)</td><td align="left">64</td><td align="left">@</td><td align="left">96</td><td align="left">、</td></tr><tr><td align="left">1</td><td align="left">SOH</td><td align="left">33</td><td align="left">!</td><td align="left">65</td><td align="left">A</td><td align="left">97</td><td align="left">a</td></tr><tr><td align="left">2</td><td align="left">STX</td><td align="left">34</td><td align="left">“</td><td align="left">66</td><td align="left">B</td><td align="left">98</td><td align="left">b</td></tr><tr><td align="left">3</td><td align="left">ETX</td><td align="left">35</td><td align="left">#</td><td align="left">67</td><td align="left">C</td><td align="left">99</td><td align="left">c</td></tr><tr><td align="left">4</td><td align="left">EOT</td><td align="left">36</td><td align="left">$</td><td align="left">68</td><td align="left">D</td><td align="left">100</td><td align="left">d</td></tr><tr><td align="left">5</td><td align="left">ENQ</td><td align="left">37</td><td align="left">%</td><td align="left">69</td><td align="left">E</td><td align="left">101</td><td align="left">e</td></tr><tr><td align="left">6</td><td align="left">ACK</td><td align="left">38</td><td align="left">&amp;</td><td align="left">70</td><td align="left">F</td><td align="left">102</td><td align="left">f</td></tr><tr><td align="left">7</td><td align="left">BEL</td><td align="left">39</td><td align="left">,</td><td align="left">71</td><td align="left">G</td><td align="left">103</td><td align="left">g</td></tr><tr><td align="left">8</td><td align="left">BS</td><td align="left">40</td><td align="left">(</td><td align="left">72</td><td align="left">H</td><td align="left">104</td><td align="left">h</td></tr><tr><td align="left">9</td><td align="left">HT</td><td align="left">41</td><td align="left">)</td><td align="left">73</td><td align="left">I</td><td align="left">105</td><td align="left">i</td></tr><tr><td align="left">10</td><td align="left">LF</td><td align="left">42</td><td align="left">*</td><td align="left">74</td><td align="left">J</td><td align="left">106</td><td align="left">j</td></tr><tr><td align="left">11</td><td align="left">VT</td><td align="left">43</td><td align="left">+</td><td align="left">75</td><td align="left">K</td><td align="left">107</td><td align="left">k</td></tr><tr><td align="left">12</td><td align="left">FF</td><td align="left">44</td><td align="left">,</td><td align="left">76</td><td align="left">L</td><td align="left">108</td><td align="left">l</td></tr><tr><td align="left">13</td><td align="left">CR</td><td align="left">45</td><td align="left">-</td><td align="left">77</td><td align="left">M</td><td align="left">109</td><td align="left">m</td></tr><tr><td align="left">14</td><td align="left">SO</td><td align="left">46</td><td align="left">.</td><td align="left">78</td><td align="left">N</td><td align="left">110</td><td align="left">n</td></tr><tr><td align="left">15</td><td align="left">SI</td><td align="left">47</td><td align="left">/</td><td align="left">79</td><td align="left">O</td><td align="left">111</td><td align="left">o</td></tr><tr><td align="left">16</td><td align="left">DLE</td><td align="left">48</td><td align="left">0</td><td align="left">80</td><td align="left">P</td><td align="left">112</td><td align="left">p</td></tr><tr><td align="left">17</td><td align="left">DCI</td><td align="left">49</td><td align="left">1</td><td align="left">81</td><td align="left">Q</td><td align="left">113</td><td align="left">q</td></tr><tr><td align="left">18</td><td align="left">DC2</td><td align="left">50</td><td align="left">2</td><td align="left">82</td><td align="left">R</td><td align="left">114</td><td align="left">r</td></tr><tr><td align="left">19</td><td align="left">DC3</td><td align="left">51</td><td align="left">3</td><td align="left">83</td><td align="left">S</td><td align="left">115</td><td align="left">s</td></tr><tr><td align="left">20</td><td align="left">DC4</td><td align="left">52</td><td align="left">4</td><td align="left">84</td><td align="left">T</td><td align="left">116</td><td align="left">t</td></tr><tr><td align="left">21</td><td align="left">NAK</td><td align="left">53</td><td align="left">5</td><td align="left">85</td><td align="left">U</td><td align="left">117</td><td align="left">u</td></tr><tr><td align="left">22</td><td align="left">SYN</td><td align="left">54</td><td align="left">6</td><td align="left">86</td><td align="left">V</td><td align="left">118</td><td align="left">v</td></tr><tr><td align="left">23</td><td align="left">TB</td><td align="left">55</td><td align="left">7</td><td align="left">87</td><td align="left">W</td><td align="left">119</td><td align="left">w</td></tr><tr><td align="left">24</td><td align="left">CAN</td><td align="left">56</td><td align="left">8</td><td align="left">88</td><td align="left">X</td><td align="left">120</td><td align="left">x</td></tr><tr><td align="left">25</td><td align="left">EM</td><td align="left">57</td><td align="left">9</td><td align="left">89</td><td align="left">Y</td><td align="left">121</td><td align="left">y</td></tr><tr><td align="left">26</td><td align="left">SUB</td><td align="left">58</td><td align="left">:</td><td align="left">90</td><td align="left">Z</td><td align="left">122</td><td align="left">z</td></tr><tr><td align="left">27</td><td align="left">ESC</td><td align="left">59</td><td align="left">;</td><td align="left">91</td><td align="left">[</td><td align="left">123</td><td align="left">{</td></tr><tr><td align="left">28</td><td align="left">FS</td><td align="left">60</td><td align="left">&lt;</td><td align="left">92</td><td align="left">/</td><td align="left">124</td><td align="left">|</td></tr><tr><td align="left">29</td><td align="left">GS</td><td align="left">61</td><td align="left">=</td><td align="left">93</td><td align="left">]</td><td align="left">125</td><td align="left">}</td></tr><tr><td align="left">30</td><td align="left">RS</td><td align="left">62</td><td align="left">&gt;</td><td align="left">94</td><td align="left">^</td><td align="left">126</td><td align="left">`</td></tr><tr><td align="left">31</td><td align="left">US</td><td align="left">63</td><td align="left">?</td><td align="left">95</td><td align="left">_</td><td align="left">127</td><td align="left">DEL</td></tr></tbody></table>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
